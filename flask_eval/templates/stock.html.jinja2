<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Task Two</title>
        <!-- styles -->
        <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
        <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/style.css') }}">
    </head>
    <body>
        <div class="container-fluid">
            <div class="row">
                <div id="left-column" class="col-3 overflow-auto vh-100">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th scope="col">Stock name</th>
                                <th scope="col" style="width:25%;">Ticker</th>
                                <th scope="col">Sector</th>
                                <th scope="col">Industry</th>
                                <th scope="col" style="width:15%;">Ratings</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for stock_ in stocks %}
                                {% set url = url_for("task_two.get_stock", ticker_symbol=stock_.ticker_symbol) %}
                                <tr id="{{ stock_.ticker_symbol }}"" onclick="window.location.href='{{url}}'" >
                                    {% for key, value in stock_.items() if key in ["stock_name", "ticker_symbol", "sector", "industry", "count"] %} 
                                            {% if key == "count" %}
                                                <td class="ratings">{{value}}</td>
                                            {% else %}
                                                <td>{{value}}</td>
                                            {% endif %}
                                    {% endfor %}
                                </tr>
                            {% endfor %}
                        <tbody>
                    </table>
                </div>
                <div id="main-area" class="col-6" style="height:100vh">
                    <div id="article_container" class="row" style="height:90%">
                        <div style="height:100%" class="col" >
                            <div style="height:5%" class="vertical-align-middle">
                                <h3>Relevant articles to the stock</h3>
                            </div>
                            <div style="height:95%; overflow-y:auto;">
                                {% for article in stock.in_articles %}
                                    {% set url = url_for("task_one.get_article", doc_id=article.doc_id) %}                                        
                                    <div class="card" onclick="window.location.href='{{url}}'">
                                        <div class="card-body table-hover">
                                            <h5 class="card-title">{{article.title}}</h5>
                                            <p class="card-text">{{article.summary}}</p>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                        <div style="height:100%" class="col">
                            <div style="height:5%" class="vertical-align-middle">
                                <h3 >Irrelevant articles to the stock</h3>
                            </div>
                            <div style="height:95%; overflow-y:scroll;">
                                {% for article in stock.not_in_articles %}
                                    {% set url = url_for("task_one.get_article", doc_id=article.doc_id) %}                                        
                                    <div class="card" onclick="window.location.href='{{url}}'">
                                        <div class="card-body table-hover">
                                            <h5 class="card-title">{{article.title}}</h5>
                                            <p class="card-text">{{article.summary}}</p>
                                        </div>
                                    </div>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    <div id="likert-scale" class="h-10 row"></div>
                </div>
                <div id="right-column" class="col" style="height:100vh">
                    <div id="stock-metadata" style="height:35%; overflow-y:auto">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th  colspan="2" scope="rows">Stock metadata</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th scope="col">Stock name</th>
                                    <td>{{ stock.stock_name }}</td>
                                </tr>
                                <tr>
                                    <th scope="col">Ticker symbol</th>
                                    <td>{{ stock.ticker_symbol }}</td>
                                </tr>
                                <tr>
                                    <th scope="col">Sector</th>
                                    <td>{{ stock.sector }}</td>
                                </tr>
                                <tr>
                                    <th scope="col">Industry</th>
                                    <td>{{ stock.industry }}</td>
                                </tr>
                                <tr>
                                    <th scope="col" colspan=2>Comment</th>
                                </tr>
                                <tr>
                                    <td colspan=2>{{ stock.comment }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div id="evaluation-instructions" style="height: 50%; overflow-y:auto">
                        <h3> Evaluation instructions: Task Two </h3>
                        <p>You are asked to evaluate model performance on an `article retrieval` task for a given stock.</p>
                        <p>Model results are inverted and for each stock the model outputs a list of `relevant` articles and `irrelevant` articles.</p>
                        <p>Task Two is to evaluate the accuracy and coherence of such lists.</p>
                        <p>You can use stock metadata table (see: above) to learn about the stock and click on a news article to read it in full.</p>
                        <p>An additional `Not Sure` evaluation rating is added in case there are no apparent cases whether the article should be (or not) included in either of the lists and/or the evaluator is not familiar with the topic enough to answer.</p>
                        <p>You should use the following evaluation criteria in your evaluations as well as fill optional checklist below.</p>
                        <ul>
                            <li><strong>Are articles in the `Relevant` column truly relevant to the stock in question?</strong></li>
                            <li><strong>Are articles in the `Irrelevant` column truly irrelevant to the stock in question?</strong></li>
                            <li><strong>Do articles in the `Relevant` reflect the sector and industry of the stock in question?</strong></li>
                            <li><strong>Personal knowledge on the stock and/or sector and/or industry</strong></li>
                        </ul>
                    </div>
                    <div id="optional-questionnaire" style="height: 15%; overflow-y:auto">
                        <h5>Reasons for evaluation (optional):</h5>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="optional-reason-1" id="optional-reason-1">
                            <label class="form-check-label" for="optional-reason-1">Irrelevant articles in the relevant column</label>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="optional-reason-2" id="optional-reason-2">
                            <label class="form-check-label" for="optional-reason-2">Relevant articles in the irrelevant column</label>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="optional-reason-3" id="optional-reason-3">
                            <label class="form-check-label" for="optional-reason-3">Topics of articles in the relevant column are not about stock sector or industry</label>
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="optional-reason-4" id="optional-reason-4">
                            <label class="form-check-label" for="optional-reason-4">Personal knowledge on the topic of the stock and/or on the topic of the article</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="optional-reason-6" id="optional-reason-6">
                            <label class="form-check-label" for="optional-reason-6">Other reasons</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <script src="{{ url_for('static', filename='bower_components/react/react.development.js') }}"></script>
        <script src="{{ url_for('static', filename='bower_components/react/react-dom.development.js') }}"></script>
        <script>
            // Scroll to the article in the navigation column
            document.getElementById("{{ stock.ticker_symbol }}").scrollIntoView({behavior: "smooth", block: "start"});

            class EvaluationForm extends React.Component {
                constructor(props) {
                    super(props);
                    this.state = {value: '', optional: null, submitted: false};
                    this.handleChange = this.handleChange.bind(this)
                    this.handleSubmit = this.handleSubmit.bind(this)
                }

                handleChange(event) {
                    this.setState({value: event.target.value});
                }

                handleSubmit(event) {
                    if (this.state.value === '') {
                        alert('Please select an evaluation rating');
                        event.preventDefault();
                    }
                    else {
                        var checkboxes = document.getElementsByClassName("form-check-input")
                        var checkedValues = []
                        for (var index = 0; index < checkboxes.length; index++) {
                            if (checkboxes[index].checked == true) {
                                checkedValues.push(checkboxes[index].value)
                            }
                            checkboxes[index].disabled = true;
                        }
                        this.setState({submitted: true, optional: checkedValues}, () => {
                            const requestOptions = {
                                method: 'POST',
                                headers: {'Content-Type': 'application/json'},
                                body: JSON.stringify({ 
                                    ticker_symbol: "{{ stock.ticker_symbol }}",
                                    value: this.state.value,
                                    optional_reasons: this.state.optional
                                })
                            };
                            fetch(window.location.href, requestOptions).then(response => {
                                response.json().then(function(data) {
                                    window.location = data.redirect_to; 
                                });
                            });
                        });
                        event.preventDefault();
                    }
                }

                render() {
                    var attribs_check = function(radio_id, this_) {
                        return {
                            type: "radio", 
                            className: "btn-check",
                            name: "rating",
                            id: radio_id,
                            value: radio_id,
                            autoComplete: "off",
                            disabled: this_.state.submitted
                        }
                    }
                    var attribs_submit = {
                        type: "submit", 
                        className: "btn btn-success",
                        disabled: this.state.submitted, 
                    }
                    return React.createElement("div", {className:"col vertical-align-middle"}, 
                        React.createElement("div", {}, 
                                React.createElement("h5", {style: {paddingTop: "10px"}}, "Model evaluation:")
                        ),
                        React.createElement("div", {className:"col-8 row"}, 
                            React.createElement("div", {className: "vertical-align-middle", onChange: this.handleChange}, 
                                React.createElement("input", attribs_check("rating-none", this), null),
                                React.createElement("label", {className: "btn btn-outline-secondary", htmlFor: "rating-none"}, "Not Sure"),

                                React.createElement("input", attribs_check("rating-1", this), null),
                                React.createElement("label", {className: "btn btn-outline-primary", htmlFor: "rating-1"}, "Very Poor"),

                                React.createElement("input", attribs_check("rating-2", this), null),
                                React.createElement("label", {className: "btn btn-outline-primary", htmlFor: "rating-2"}, "Poor"),

                                React.createElement("input", attribs_check("rating-3", this), null),
                                React.createElement("label", {className: "btn btn-outline-primary", htmlFor: "rating-3"}, "Acceptable"),

                                React.createElement("input", attribs_check("rating-4", this), null),
                                React.createElement("label", {className: "btn btn-outline-primary", htmlFor: "rating-4"}, "Good"),

                                React.createElement("input", attribs_check("rating-5", this), null),
                                React.createElement("label", {className: "btn btn-outline-primary", htmlFor: "rating-5"}, "Very Good")

                            )
                        ),
                        React.createElement("form", {style: {display:"inherit"}, onSubmit: this.handleSubmit},
                            React.createElement("div", {className:"col vertical-align-middle", onSubmit: this.handleSubmit},
                                React.createElement("button", attribs_submit, this.state.submitted ? "Submitted" : "Submit")
                            )
                        )
                    )
                }
            }
            const domContainer = document.querySelector('#likert-scale');
            ReactDOM.render(React.createElement(EvaluationForm), domContainer);
        </script>
    </body>
</html>